/*!
This file is part of CycloneDX JavaScript Library.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/

import type { Comparable } from '../../_helpers/sortable'
import { SortableComparables } from '../../_helpers/sortable'
import type { AffectStatus } from '../../enums/vulnerability'
import type { BomLinkElement } from '../bomLink'
import type { BomRef } from '../bomRef'

export interface OptionalAffectProperties {
  versions?: Affect['versions']
}

export class Affect implements Comparable<Affect> {
  ref: BomRef | BomLinkElement
  versions: AffectedVersionRepository

  constructor (ref: Affect['ref'], op: OptionalAffectProperties = {}) {
    this.ref = ref
    this.versions = op.versions ?? new AffectedVersionRepository()
  }

  compare (other: Affect): number {
    /* eslint-disable @typescript-eslint/strict-boolean-expressions -- run compares in weighted order */
    return this.ref.compare(other.ref) ||
      this.versions.compare(other.versions)
    /* eslint-enable  @typescript-eslint/strict-boolean-expressions */
  }
}

export class AffectRepository extends SortableComparables<Affect> {
}

export interface OptionalAffectedVersionProperties {
  status?: AffectedVersion['status']
}

export class AffectedSingleVersion implements Comparable<AffectedSingleVersion> {
  version: string
  status?: AffectStatus

  constructor (version: string, op: OptionalAffectedVersionProperties = {}) {
    this.version = version
    this.status = op.status
  }

  compare (other: AffectedSingleVersion): number {
    /* eslint-disable @typescript-eslint/strict-boolean-expressions -- run compares in weighted order */
    return (this.version).localeCompare(other.version) ||
      (this.status ?? '').localeCompare(other.status ?? '')
    /* eslint-enable  @typescript-eslint/strict-boolean-expressions */
  }
}

export class AffectedVersionRange implements Comparable<AffectedVersionRange> {
  range: string
  status?: AffectStatus

  constructor (range: string, op: OptionalAffectedVersionProperties = {}) {
    this.range = range
    this.status = op.status
  }

  compare (other: AffectedVersionRange): number {
    /* eslint-disable @typescript-eslint/strict-boolean-expressions -- run compares in weighted order */
    return (this.range).localeCompare(other.range) ||
      (this.status ?? '').localeCompare(other.status ?? '')
    /* eslint-enable  @typescript-eslint/strict-boolean-expressions */
  }
}

export type AffectedVersion = AffectedSingleVersion | AffectedVersionRange

export class AffectedVersionRepository extends SortableComparables<AffectedVersion> {}
