/*!
This file is part of CycloneDX JavaScript Library.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/

import { BomRef } from './bomRef'
import { Comparable, SortableComparables } from '../_helpers/sortable'
import { PropertyRepository } from './property'
import { VulnerabilitySource } from './vulnerabilitySource'
import { ToolRepository } from './tool'
import { VulnerabilityReferenceRepository } from './vulnerabilityReference'
import { VulnerabilityRatingRepository } from './vulnerabilityRating'
import { VulnerabilityAdvisoryRepository } from './vulnerabilityAdvisory'
import { VulnerabilityCredits } from './vulnerabilityCredits'
import { VulnerabilityAffectsRepository } from './vulnerabilityAffects'
import { VulnerabilityAnalysisRepository } from './vulnerabilityAnalysis'
import { CWE } from '../types'

interface OptionalProperties {
  bomRef?: BomRef['value']
  id?: Vulnerability['id']
  source?: Vulnerability['source']
  references?: Vulnerability['references']
  ratings?: Vulnerability['ratings']
  cwes?: Vulnerability['cwes']
  description?: Vulnerability['description']
  detail?: Vulnerability['detail']
  recommendation?: Vulnerability['recommendation']
  advisories?: Vulnerability['advisories']
  created?: Vulnerability['created']
  published?: Vulnerability['published']
  updated?: Vulnerability['updated']
  credits?: Vulnerability['credits']
  tools?: Vulnerability['tools']
  analysis?: Vulnerability['analysis']
  affects?: Vulnerability['affects']
  properties?: Vulnerability['properties']
}

export class Vulnerability implements Comparable<Vulnerability> {
  /** @see bomRef */
  readonly #bomRef: BomRef
  id?: string
  source?: VulnerabilitySource
  references: VulnerabilityReferenceRepository
  ratings: VulnerabilityRatingRepository
  cwes: CWE[]
  description?: string
  detail?: string
  recommendation?: string
  advisories: VulnerabilityAdvisoryRepository
  created?: Date
  published?: Date
  updated?: Date
  credits?: VulnerabilityCredits
  tools?: ToolRepository
  analysis?: VulnerabilityAnalysisRepository
  affects?: VulnerabilityAffectsRepository
  properties: PropertyRepository

  constructor (op: OptionalProperties = {}) {
    this.#bomRef = new BomRef(op.bomRef)
    this.id = op.id
    this.source = op.source
    this.references = op.references ?? new VulnerabilityReferenceRepository()
    this.ratings = op.ratings ?? new VulnerabilityRatingRepository()
    this.cwes = op.cwes ?? []
    this.description = op.description
    this.detail = op.detail
    this.recommendation = op.recommendation
    this.advisories = op.advisories ?? new VulnerabilityAdvisoryRepository()
    this.created = op.created
    this.published = op.published
    this.updated = op.updated
    this.credits = op.credits
    this.tools = op.tools ?? new ToolRepository()
    this.analysis = op.analysis ?? new VulnerabilityAnalysisRepository()
    this.affects = op.affects ?? new VulnerabilityAffectsRepository()
    this.properties = op.properties ?? new PropertyRepository()
  }

  get bomRef (): BomRef {
    return this.#bomRef
  }

  compare (other: Vulnerability): number {
    // The purpose of this method is not to test for equality, but have deterministic comparability.
    const bomRefCompare = this.bomRef.compare(other.bomRef)
    if (bomRefCompare !== 0) {
      return bomRefCompare
    }

    const idCompare = (this.id ?? '').localeCompare(other.id ?? '')
    if (idCompare !== 0) {
      return idCompare
    }

    if (this.source !== undefined && other.source !== undefined) {
      const sourceCompare = this.source.compare(other.source)
      if (sourceCompare !== 0) {
        return sourceCompare
      }
    }
    if (this.references !== undefined && other.references !== undefined) {
      const referencesCompare = this.references.compare(other.references)
      if (referencesCompare !== 0) {
        return referencesCompare
      }
    }
    if (this.cwes !== undefined && other.cwes !== undefined) {
      const lenDiff = this.cwes.length - other.cwes.length
      if (lenDiff !== 0) {
        return lenDiff
      }
      const cwes = new Set(this.cwes)
      const otherCwes = new Set(other.cwes)
      const sameCwes = [...cwes].every((cwe) => otherCwes.has(cwe))
      if (!sameCwes) {
        return -1
      }
    }
    if (this.advisories !== undefined && other.advisories !== undefined) {
      const advisoriesCompare = this.advisories.compare(other.advisories)
      if (advisoriesCompare !== 0) {
        return advisoriesCompare
      }
    }
    if (this.credits !== undefined && other.credits !== undefined) {
      const creditsCompare = this.credits.compare(other.credits)
      if (creditsCompare !== 0) {
        return creditsCompare
      }
    }
    if (this.tools !== undefined && other.tools !== undefined) {
      const toolsCompare = this.tools.compare(other.tools)
      if (toolsCompare !== 0) {
        return toolsCompare
      }
    }
    if (this.analysis !== undefined && other.analysis !== undefined) {
      const analysisCompare = this.analysis.compare(other.analysis)
      if (analysisCompare !== 0) {
        return analysisCompare
      }
    }
    if (this.affects !== undefined && other.affects !== undefined) {
      const affectsCompare = this.affects.compare(other.affects)
      if (affectsCompare !== 0) {
        return affectsCompare
      }
    }
    if (this.properties !== undefined && other.properties !== undefined) {
      const propertiesCompare = this.properties.compare(other.properties)
      if (propertiesCompare !== 0) {
        return propertiesCompare
      }
    }

    /* eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- run compares in weighted order */
    return (this.description ?? '').localeCompare(other.description ?? '') ||
      (this.detail ?? '').localeCompare(other.detail ?? '') ||
      (this.recommendation ?? '').localeCompare(other.recommendation ?? '') ||
      (this.created?.toString() ?? '').localeCompare(other.created?.toString() ?? '') ||
      (this.published?.toString() ?? '').localeCompare(other.published?.toString() ?? '') ||
      (this.updated?.toString() ?? '').localeCompare(other.updated?.toString() ?? '')
  }
}

export class VulnerabilityRepository extends SortableComparables<Vulnerability> {
}
