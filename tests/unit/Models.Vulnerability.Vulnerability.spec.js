/*!
This file is part of CycloneDX JavaScript Library.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/
'use strict'

/*!
This file is part of CycloneDX JavaScript Library.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
Copyright (c) OWASP Foundation. All Rights Reserved.
*/

const assert = require('assert')
const { suite, test } = require('mocha')

const {
  Models: {
    PropertyRepository, ToolRepository,
    Vulnerability: {
      AdvisoryRepository, AffectRepository, Analysis, Credits, RatingRepository, ReferenceRepository, Source,
      Vulnerability
    }
  },
  Enums: {
    Vulnerability: { compareSeverities, Severity }
  },
  Types: { CweRepository }
} = require('../../')

// @FIXME re-enable and fix tests
suite('Models.Vulnerability.Vulnerability', () => {
  test('construct with empty properties', () => {
    const vulnerability = new Vulnerability()

    assert.strictEqual(vulnerability.bomRef.value, undefined)
    assert.strictEqual(vulnerability.id, undefined)
    assert.strictEqual(vulnerability.source, undefined)
    assert.ok(vulnerability.references instanceof ReferenceRepository)
    assert.strictEqual(vulnerability.references.size, 0)
    assert.ok(vulnerability.ratings instanceof RatingRepository)
    assert.strictEqual(vulnerability.ratings.size, 0)
    assert.ok(vulnerability.cwes instanceof CweRepository)
    assert.strictEqual(vulnerability.cwes.size, 0)
    assert.strictEqual(vulnerability.description, undefined)
    assert.strictEqual(vulnerability.detail, undefined)
    assert.strictEqual(vulnerability.recommendation, undefined)
    assert.ok(vulnerability.advisories instanceof AdvisoryRepository)
    assert.strictEqual(vulnerability.advisories.size, 0)
    assert.strictEqual(vulnerability.created, undefined)
    assert.strictEqual(vulnerability.published, undefined)
    assert.strictEqual(vulnerability.updated, undefined)
    assert.strictEqual(vulnerability.credits, undefined)
    assert.ok(vulnerability.tools instanceof ToolRepository)
    assert.strictEqual(vulnerability.tools.size, 0)
    assert.strictEqual(vulnerability.analysis, undefined)
    assert.ok(vulnerability.affects instanceof AffectRepository)
    assert.strictEqual(vulnerability.affects.size, 0)
    assert.ok(vulnerability.properties instanceof PropertyRepository)
    assert.strictEqual(vulnerability.properties.size, 0)
  })

  test('construct with preset properties', () => {
    const dummySource = new Source()
    const dummyReferences = new ReferenceRepository()
    const dummyRatings = new RatingRepository()
    const dummyCwes = new CweRepository()
    const dummyAdvisories = new AdvisoryRepository()
    const dummyCreated = new Date()
    const dummyPublished = new Date()
    const dummyUpdated = new Date()
    const dummyCredits = new Credits()
    const dummyTools = new ToolRepository()
    const dummyAnalysis = new Analysis()
    const dummyAffects = new AffectRepository()
    const dummyProperties = new PropertyRepository()

    const vulnerability = new Vulnerability({
      bomRef: 'my-bomref',
      id: 'CVE-2022-0001',
      source: dummySource,
      references: dummyReferences,
      ratings: dummyRatings,
      cwes: dummyCwes,
      description: 'my description',
      detail: 'my detail',
      recommendation: 'delete everything',
      advisories: dummyAdvisories,
      created: dummyCreated,
      published: dummyPublished,
      updated: dummyUpdated,
      credits: dummyCredits,
      tools: dummyTools,
      analysis: dummyAnalysis,
      affects: dummyAffects,
      properties: dummyProperties
    })

    assert.strictEqual(vulnerability.bomRef.value, 'my-bomref')
    assert.strictEqual(vulnerability.id, 'CVE-2022-0001')
    assert.strictEqual(vulnerability.source, dummySource)
    assert.strictEqual(vulnerability.references, dummyReferences)
    assert.strictEqual(vulnerability.ratings, dummyRatings)
    assert.strictEqual(vulnerability.cwes, dummyCwes)
    assert.strictEqual(vulnerability.description, 'my description')
    assert.strictEqual(vulnerability.detail, 'my detail')
    assert.strictEqual(vulnerability.recommendation, 'delete everything')
    assert.strictEqual(vulnerability.advisories, dummyAdvisories)
    assert.strictEqual(vulnerability.created, dummyCreated)
    assert.strictEqual(vulnerability.published, dummyPublished)
    assert.strictEqual(vulnerability.updated, dummyUpdated)
    assert.strictEqual(vulnerability.credits, dummyCredits)
    assert.strictEqual(vulnerability.tools, dummyTools)
    assert.strictEqual(vulnerability.analysis, dummyAnalysis)
    assert.strictEqual(vulnerability.affects, dummyAffects)
    assert.strictEqual(vulnerability.properties, dummyProperties)
  })

  test('compare severities', () => {
    [
      [Severity.Critical, Severity.Critical, 0],
      [Severity.High, Severity.High, 0],
      [Severity.Medium, Severity.Medium, 0],
      [Severity.Low, Severity.Low, 0],
      [Severity.Info, Severity.Info, 0],
      [Severity.None, Severity.None, 0],
      [Severity.Unknown, Severity.Unknown, 0],

      [Severity.Critical, Severity.High, 1],
      [Severity.Critical, Severity.Medium, 1],
      [Severity.Critical, Severity.Low, 1],
      [Severity.Critical, Severity.Info, 1],
      [Severity.Critical, Severity.None, 1],
      [Severity.Critical, Severity.Unknown, 1],

      [Severity.High, Severity.Medium, 1],
      [Severity.High, Severity.Low, 1],
      [Severity.High, Severity.Info, 1],
      [Severity.High, Severity.None, 1],
      [Severity.High, Severity.Unknown, 1],

      [Severity.Medium, Severity.Low, 1],
      [Severity.Medium, Severity.Info, 1],
      [Severity.Medium, Severity.None, 1],
      [Severity.Medium, Severity.Unknown, 1],

      [Severity.Low, Severity.Info, 1],
      [Severity.Low, Severity.None, 1],
      [Severity.Low, Severity.Unknown, 1],

      [Severity.Info, Severity.None, 1],
      [Severity.Info, Severity.Unknown, 1],

      [Severity.None, Severity.Unknown, 1],

      [Severity.High, Severity.Critical, -1],
      [Severity.Medium, Severity.Critical, -1],
      [Severity.Low, Severity.Critical, -1],
      [Severity.Info, Severity.Critical, -1],
      [Severity.None, Severity.Critical, -1],
      [Severity.Unknown, Severity.Critical, -1],

      [Severity.Medium, Severity.High, -1],
      [Severity.Low, Severity.High, -1],
      [Severity.Info, Severity.High, -1],
      [Severity.None, Severity.High, -1],
      [Severity.Unknown, Severity.High, -1],

      [Severity.Low, Severity.Medium, -1],
      [Severity.Info, Severity.Medium, -1],
      [Severity.None, Severity.Medium, -1],
      [Severity.Unknown, Severity.Medium, -1],

      [Severity.Info, Severity.Low, -1],
      [Severity.None, Severity.Low, -1],
      [Severity.Unknown, Severity.Low, -1],

      [Severity.None, Severity.Info, -1],
      [Severity.Unknown, Severity.Info, -1],

      [Severity.Unknown, Severity.None, -1]
    ].forEach(([s1, s2, expected]) => {
      assert.strictEqual(compareSeverities(s1, s2), expected)
    })
  })
})
